// ***************************************************************************
// GENERATED:
//   Time:    11-May-2019 13:34PM
//   By:      Corey Engelken
//   Mode:    debug
//   Command: origen g timing -t legacy.rb -e j750.rb
// ***************************************************************************
// ENVIRONMENT:
//   Application
//     Source:    git@github.com:Origen-SDK/origen_testers.git
//     Version:   0.20.0
//     Branch:    pattern_reader_ast(24ba5ae5573) (+local edits)
//   Origen
//     Source:    https://github.com/Origen-SDK/origen
//     Version:   0.43.0
//   Plugins
//     atp:                      1.1.3
//     origen_arm_debug:         0.4.3
//     origen_doc_helpers:       0.8.0
//     origen_jtag:              0.20.0
//     origen_swd:               1.1.1
// ***************************************************************************
import tset nvmbist;                                                                            
import tset nvm_slow;                                                                           
import tset nvm_fast;                                                                           
import tset nvm_slow_40ns;                                                                      
import tset nvm_slow_200ns;                                                                     
import tset nvm_fast_40ns;                                                                      
svm_only_file = no;                                                                             
opcode_mode = extended;                                                                         
compressed = yes;                                                                               
                                                                                                
vector ($tset, nvm_reset, nvm_clk, nvm_clk_mux, porta, portb, nvm_invoke, nvm_done, nvm_fail, nvm_alvtst, nvm_ahvtst, nvm_dtst, tclk, trst)                               
{                                                                                               
start_label pattern_st:                                                                         
//                                                                                              n n n p        p        n n n n n n t t
//                                                                                              v v v o        o        v v v v v v c r
//                                                                                              m m m r        r        m m m m m m l s
//                                                                                              - - - t        t        - - - - - - k t
//                                                                                              r c c a        b        i d f a a d    
//                                                                                              e l l                   n o a l h t    
//                                                                                              s k k                   v n i v v s    
//                                                                                              e   -                   o e l t t t    
//                                                                                              t   m                   k     s s      
//                                                                                                  u                   e     t t      
//                                                                                                  x                                  
// ######################################################################
// ## Enter Test Mode
// ######################################################################
                                                                 > nvm_slow                     1 1 1 00100000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00001000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00001000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00100000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00111000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00111000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00111000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00111000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00111000 00000000 1 H L X X X 0 1 ;                               
// ######################################################################
// ## Test ability to switch timesets
// ######################################################################
// These vectors should use timeset nvm_slow
                                                                 > nvm_slow                     1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// These vectors should use timeset nvm_fast
                                                                 > nvm_fast                     1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_fast                     1 1 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_fast                     1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_fast                     1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// ######################################################################
// ## Test ability to switch timesets within a block
// ######################################################################
// These vectors should use timeset nvm_slow
                                                                 > nvm_slow                     1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// These vectors should use timeset nvm_fast
                                                                 > nvm_fast                     1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_fast                     1 1 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_fast                     1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_fast                     1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// ######################################################################
// ## Test ability to call a set timeset block with no arguments
// ######################################################################
// These vectors should use timeset nvm_fast
                                                                 > nvm_fast                     1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_fast                     1 1 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_fast                     1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_fast                     1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// These vectors should use timeset nvm_fast
                                                                 > nvm_fast                     1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_fast                     1 1 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_fast                     1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_fast                     1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// ######################################################################
// ## Test ability to call with a single array argument
// ######################################################################
// These vectors should use timeset nvm_slow_40ns
                                                                 > nvm_slow_40ns                1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_slow_40ns                1 1 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_slow_40ns                1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_slow_40ns                1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// These vectors should use timeset nvm_fast
                                                                 > nvm_fast                     1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_fast                     1 1 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_fast                     1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_fast                     1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// These vectors should use timeset nvm_fast
                                                                 > nvm_fast                     1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_fast                     1 1 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_fast                     1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_fast                     1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// These vectors should use timeset nvm_fast
                                                                 > nvm_fast                     1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_fast                     1 1 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_fast                     1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_fast                     1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// ######################################################################
// ## Test that delay calculations are based on the current timeset period
// ######################################################################
// This should wait for 5 cycles, 1000/200
// Wait for 1.0us
repeat 5                                                         > nvm_slow_200ns               1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// This should wait for 25 cycles, 1000/40
// Wait for 1.0us
repeat 25                                                        > nvm_fast_40ns                1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// ######################################################################
// ## Test the period counter
// ######################################################################
// This should generate a sequence with a clock pulse on the clk
// pin with period of 1 ms, and overall duration 10 ms
// Wait for 1.0ms
repeat 25000                                                     > nvm_fast_40ns                1 0 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_fast_40ns                1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// Wait for 1.0ms
repeat 25000                                                     > nvm_fast_40ns                1 0 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_fast_40ns                1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// Wait for 1.0ms
repeat 25000                                                     > nvm_fast_40ns                1 0 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_fast_40ns                1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// Wait for 1.0ms
repeat 25000                                                     > nvm_fast_40ns                1 0 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_fast_40ns                1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// Wait for 1.0ms
repeat 25000                                                     > nvm_fast_40ns                1 0 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_fast_40ns                1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// Wait for 1.0ms
repeat 25000                                                     > nvm_fast_40ns                1 0 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_fast_40ns                1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// Wait for 1.0ms
repeat 25000                                                     > nvm_fast_40ns                1 0 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_fast_40ns                1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// Wait for 1.0ms
repeat 25000                                                     > nvm_fast_40ns                1 0 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_fast_40ns                1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// Wait for 1.0ms
repeat 25000                                                     > nvm_fast_40ns                1 0 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_fast_40ns                1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// Wait for 1.0ms
repeat 25000                                                     > nvm_fast_40ns                1 0 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_fast_40ns                1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// ######################################################################
// ## Test that Fixnum.cycles works
// ######################################################################
// There should be 10 cycles here
repeat 10                                                        > nvm_fast_40ns                1 0 1 00000000 00000000 1 H L X X X 0 1 ;
// ######################################################################
// ## Pattern complete
// ######################################################################
end_module                                                       > nvm_fast_40ns                1 0 1 00000000 00000000 1 H L X X X 0 1 ;
}                                                                                               
