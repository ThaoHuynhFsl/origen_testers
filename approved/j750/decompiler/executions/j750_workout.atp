// ***************************************************************************
// GENERATED:
//   Time:    09-May-2019 05:57AM
//   By:      Corey Engelken
//   Mode:    debug
//   Command: origen g /proj/k4l1_users1/b50956/origen_blocks/origen_testers/pattern/decompile.rb -t legacy.rb -e j750.rb
// ***************************************************************************
// ENVIRONMENT:
//   Application
//     Source:    git@github.com:Origen-SDK/origen_testers.git
//     Version:   0.20.0
//     Branch:    pattern_reader_ast(24ba5ae5573) (+local edits)
//   Origen
//     Source:    https://github.com/Origen-SDK/origen
//     Version:   0.43.0
//   Plugins
//     atp:                      1.1.3
//     origen_arm_debug:         0.4.3
//     origen_doc_helpers:       0.8.0
//     origen_jtag:              0.20.0
//     origen_swd:               1.1.1
// ***************************************************************************
import tset nvmbist;                                                                            
import tset nvm_slow;                                                                           
svm_only_file = no;                                                                             
opcode_mode = extended;                                                                         
compressed = yes;                                                                               
                                                                                                
vector ($tset, nvm_reset, nvm_clk, nvm_clk_mux, porta, portb, nvm_invoke, nvm_done, nvm_fail, nvm_alvtst, nvm_ahvtst, nvm_dtst, tclk, trst)                               
{                                                                                               
start_label pattern_st:                                                                         
//                                                                                              n n n p        p        n n n n n n t t
//                                                                                              v v v o        o        v v v v v v c r
//                                                                                              m m m r        r        m m m m m m l s
//                                                                                              - - - t        t        - - - - - - k t
//                                                                                              r c c a        b        i d f a a d    
//                                                                                              e l l                   n o a l h t    
//                                                                                              s k k                   v n i v v s    
//                                                                                              e   -                   o e l t t t    
//                                                                                              t   m                   k     s s      
//                                                                                                  u                   e     t t      
//                                                                                                  x                                  
// ######################################################################
// ## Enter Test Mode
// ######################################################################
                                                                 > nvm_slow                     1 1 1 00100000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00001000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00001000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00100000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00111000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00111000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00111000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00111000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00111000 00000000 1 H L X X X 0 1 ;                               
// // ***************************************************************************
// // GENERATED:
// //   Time:    03-Feb-2016 09:28AM
// //   By:      Stephen McGinty
// //   Command: origen g j750_workout -t debug_j750_dut2.rb
// // ***************************************************************************
// // ENVIRONMENT:
// //   Application
// //     Source:    git@github.com:Origen-SDK/origen_testers.git
// //     Version:   0.5.5
// //     Branch:    master(7f8b547da3b)
// //   Origen
// //     Source:    https://github.com/Origen-SDK/origen
// //     Version:   0.5.8
// //   Plugins
// //     origen_arm_debug:         0.4.3
// //     origen_doc_helpers:       0.2.1
// //     origen_jtag:              0.12.0
// //     origen_swd:               0.5.0
// // ***************************************************************************
// //                                                                                              n n n p        p        n n n n n n t t
// //                                                                                              v v v o        o        v v v v v v c r
// //                                                                                              m m m r        r        m m m m m m l s
// //                                                                                              - - - t        t        - - - - - - k t
// //                                                                                              r c c a        b        i d f a a d    
// //                                                                                              e l l                   n o a l h t    
// //                                                                                              s k k                   v n i v v s    
// //                                                                                              e   -                   o e l t t t    
// //                                                                                              t   m                   k     s s      
// //                                                                                                  u                   e     t t      
// //                                                                                                  x                                  
// // ######################################################################
// // ## Enter Test Mode
// // ######################################################################
                                                                 > nvm_slow                     1 1 1 00100000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00001000 00000000 1 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00001000 00000000 0 H L X X X 0 1 ;
                                                                 > nvm_slow                     1 1 1 00100000 00000000 1 H L X X X 0 1 ;
repeat 5                                                         > nvm_slow                     1 1 1 00111000 00000000 1 H L X X X 0 1 ;
// // ######################################################################
// // ## Test that basic cycling works
// // ######################################################################
                                                                 > nvmbist                      1 1 1 00000000 00000000 0 H L X X X 0 1 ;
repeat 10                                                        > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 00000000 00000000 0 H L X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// // ######################################################################
// // ## Test that the port API works
// // ######################################################################
                                                                 > nvmbist                      1 1 1 01010101 00000000 1 H L X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 HLHLHLHL 00000000 1 H L X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 01010101 00000000 1 H L X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 XXXXXXXX 00000000 1 H L X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 11111111 00000000 1 H L X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 22222222 00000000 1 H L X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 HHHHHHHH 00000000 1 H L X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 LLLLLLLL 00000000 1 H L X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 00000HH0 00000000 1 H L X X X 0 1 ;
// // ######################################################################
// // ## Test that the store method works
// // ######################################################################
// // This vector should be stored
repeat 2                                                         > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// // This vector should be stored
repeat 4                                                         > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// // This vector should be stored
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// // ######################################################################
// // ## Test calling a subroutine
// // ######################################################################
// // This vector should call subroutine 'sub1'
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// // This vector should call subroutine 'sub2'
repeat 2                                                         > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// // This vector should call subroutine 'sub3', however because
// // it is local it should not appear in the imports in the header
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// // ######################################################################
// // ## Test generating a handshake inside a subroutine
// // ######################################################################
// // The next line should have a global label 'sub3', but no vector
repeat 2                                                         > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// // This vector should have a return statement
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// // ######################################################################
// // ## Test generating a handshake with a readcode
// // ######################################################################
repeat 3                                                         > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// // ######################################################################
// // ## Test frequency counter
// // ######################################################################
repeat 7                                                         > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
repeat 2000                                                      > nvmbist                      1 1 1 00000000 00000000 1 H L X X 0 0 1 ;
repeat 4                                                         > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// // ######################################################################
// // ## Test a single pin match loop - short timeout
// // ######################################################################
// // Wait for a maximum of 5.0ms
// // Start the match loop
repeat 2                                                         > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// // Check if nvm_done is high
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// //  Wait for the result to propagate through the pipeline
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 X L X X X 0 1 ;
// // Branch if block condition 0 met
repeat 2                                                         > nvmbist                      1 1 1 00000000 00000000 1 X L X X X 0 1 ;
// // Match loop cycle count = 37
// // Loop back around if time remaining
repeat 2                                                         > nvmbist                      1 1 1 00000000 00000000 1 X L X X X 0 1 ;
// // To get here something has gone wrong, check block again to force a pattern failure
// // Check if nvm_done is high
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
repeat 3                                                         > nvmbist                      1 1 1 00000000 00000000 1 X L X X X 0 1 ;
// // ######################################################################
// // ## Test a single pin match loop- long timeout
// // ######################################################################
// // Wait for a maximum of 7.00s
// // Start the match loop
repeat 2                                                         > nvmbist                      1 1 1 00000000 00000000 1 X L X X X 0 1 ;
// // Check if nvm_done is high
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// //  Wait for the result to propagate through the pipeline
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 X L X X X 0 1 ;
// // Branch if block condition 0 met
repeat 2                                                         > nvmbist                      1 1 1 00000000 00000000 1 X L X X X 0 1 ;
// // Match loop cycle count = 37
// // Loop back around if time remaining
repeat 2                                                         > nvmbist                      1 1 1 00000000 00000000 1 X L X X X 0 1 ;
// // To get here something has gone wrong, check block again to force a pattern failure
// // Check if nvm_done is high
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
repeat 3                                                         > nvmbist                      1 1 1 00000000 00000000 1 X L X X X 0 1 ;
// // ######################################################################
// // ## Test a single pin match loop - with clr_fail after match loop complete
// // ######################################################################
// // Wait for a maximum of 5.0ms
// // Start the match loop
repeat 2                                                         > nvmbist                      1 1 1 00000000 00000000 1 X L X X X 0 1 ;
// // Check if nvm_done is high
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// //  Wait for the result to propagate through the pipeline
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 X L X X X 0 1 ;
// // Branch if block condition 0 met
repeat 2                                                         > nvmbist                      1 1 1 00000000 00000000 1 X L X X X 0 1 ;
// // Match loop cycle count = 37
// // Loop back around if time remaining
repeat 2                                                         > nvmbist                      1 1 1 00000000 00000000 1 X L X X X 0 1 ;
// // To get here something has gone wrong, check block again to force a pattern failure
// // Check if nvm_done is high
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
repeat 4                                                         > nvmbist                      1 1 1 00000000 00000000 1 X L X X X 0 1 ;
// // ######################################################################
// // ## Test a two pin match loop
// // ######################################################################
// // Wait for a maximum of 5.0ms
// // Start the match loop
repeat 2                                                         > nvmbist                      1 1 1 00000000 00000000 1 X L X X X 0 1 ;
// // Check if nvm_done is high
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
// //  Wait for the result to propagate through the pipeline
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 X L X X X 0 1 ;
// // Branch if block condition 0 met
repeat 2                                                         > nvmbist                      1 1 1 00000000 00000000 1 X L X X X 0 1 ;
// // Check if nvm_fail is low
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 L L X X X 0 1 ;
// //  Wait for the result to propagate through the pipeline
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 X X X X X 0 1 ;
// // Branch if block condition 1 met
repeat 2                                                         > nvmbist                      1 1 1 00000000 00000000 1 X X X X X 0 1 ;
// // Match loop cycle count = 74
// // Loop back around if time remaining
repeat 2                                                         > nvmbist                      1 1 1 00000000 00000000 1 X X X X X 0 1 ;
// // To get here something has gone wrong, check block again to force a pattern failure
// // Check if nvm_done is high
// // Check if nvm_fail is low
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 H L X X X 0 1 ;
repeat 6                                                         > nvmbist                      1 1 1 00000000 00000000 1 X X X X X 0 1 ;
// // ######################################################################
// // ## Test adding an arbitrary label
// // ######################################################################
repeat 2                                                         > nvmbist                      1 1 1 00000000 00000000 1 X X X X X 0 1 ;
// // ######################################################################
// // ## Test calling a match loop
// // ######################################################################
repeat 2                                                         > nvmbist                      1 1 1 00000000 00000000 1 X X X X X 0 1 ;
// // ######################################################################
// // ## Test setting the readcode to 100
// // ######################################################################
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 X X X X X 0 1 ;
// // ######################################################################
// // ## Test explicit branching
// // ######################################################################
                                                                 > nvmbist                      1 1 1 00000000 00000000 1 X X X X X 0 1 ;
// // ######################################################################
// // ## Test looping, these vectors should be executed once
// // ######################################################################
                                                                 > nvmbist                      1 1 1 10101010 00000000 1 X X X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 01010101 00000000 1 X X X X X 0 1 ;
// // ######################################################################
// // ## Test looping, these vectors should be executed 3 times
// // ######################################################################
repeat 2                                                         > nvmbist                      1 1 1 01010101 00000000 1 X X X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 10101010 00000000 1 X X X X X 0 1 ;
repeat 2                                                         > nvmbist                      1 1 1 01010101 00000000 1 X X X X X 0 1 ;
// // ######################################################################
// // ## Test looping with label first, these vectors should be executed 3 times
// // ######################################################################
                                                                 > nvmbist                      1 1 1 01010101 00000000 1 X X X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 10101010 00000000 1 X X X X X 0 1 ;
repeat 2                                                         > nvmbist                      1 1 1 01010101 00000000 1 X X X X X 0 1 ;
// // ######################################################################
// // ## Test repeat_previous
// // ######################################################################
                                                                 > nvmbist                      1 1 1 01010101 00000000 1 X X X X X 0 1 ;
// // Invoke should repeat previous for 10 cycles
repeat 10                                                        > nvmbist                      1 1 1 01010101 00000000 - X X X X X 0 1 ;
// // All pins should repeat previous for 10 cycles, except the clk pin
repeat 10                                                        > nvmbist                      - 1 - -------- -------- - - - - - - - - ;
// // All should return to the original state
                                                                 > nvmbist                      1 1 1 01010101 00000000 1 X X X X X 0 1 ;
// // ######################################################################
// // ## Test suspend compares
// // ######################################################################
                                                                 > nvmbist                      1 1 1 01010101 00000000 1 X H X X X 0 1 ;
// // The fail pin should not be compared on these vectors
repeat 10                                                        > nvmbist                      1 1 1 01010101 00000000 1 X X X X X 0 1 ;
// // And now it should
                                                                 > nvmbist                      1 1 1 01010101 00000000 1 X H X X X 0 1 ;
// // ######################################################################
// // ## Test inhibit vectors and comments
// // ######################################################################
// // The invoke pin should be driving high on this cycle
                                                                 > nvmbist                      1 1 1 01010101 00000000 1 X H X X X 0 1 ;
// // This should be the last thing you see until 'Inhibit complete!'
// // Inhibit complete!
// // The invoke pin should be driving low on this cycle
                                                                 > nvmbist                      1 1 1 01010101 00000000 0 X H X X X 0 1 ;
// // ######################################################################
// // ## Test memory test pin states
// // ######################################################################
repeat 2                                                         > nvmbist                      1 1 1 01010101 00000000 D X H X X X 0 1 ;
repeat 2                                                         > nvmbist                      1 1 1 01010101 00000000 E X H X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 01010101 00000000 0 X H X X X 0 1 ;
// // ######################################################################
// // ## Test memory test port states
// // ######################################################################
repeat 2                                                         > nvmbist                      1 1 1 DDDDDDDD 00000000 0 X H X X X 0 1 ;
repeat 2                                                         > nvmbist                      1 1 1 EEEEEEEE 00000000 0 X H X X X 0 1 ;
                                                                 > nvmbist                      1 1 1 00000000 00000000 0 X H X X X 0 1 ;
// // ######################################################################
// // ## Test that long repeats are broken down to < 65k repeats
// // ######################################################################
repeat 65535                                                     > nvmbist                      1 1 1 00000000 00000000 1 X H X X X 0 1 ;
repeat 65535                                                     > nvmbist                      1 1 1 00000000 00000000 1 X H X X X 0 1 ;
repeat 65535                                                     > nvmbist                      1 1 1 00000000 00000000 1 X H X X X 0 1 ;
repeat 43395                                                     > nvmbist                      1 1 1 00000000 00000000 1 X H X X X 0 1 ;
// // ######################################################################
// // ## Test that long repeats do not compress to > 65k repeats
// // ######################################################################
repeat 65535                                                     > nvmbist                      1 1 1 00000000 00000000 0 X H X X X 0 1 ;
repeat 65535                                                     > nvmbist                      1 1 1 00000000 00000000 0 X H X X X 0 1 ;
repeat 65535                                                     > nvmbist                      1 1 1 00000000 00000000 0 X H X X X 0 1 ;
repeat 43395                                                     > nvmbist                      1 1 1 00000000 00000000 0 X H X X X 0 1 ;
// // ######################################################################
// // ## Test real life case where dont compress was ignored
// // ######################################################################
repeat 201                                                       > nvmbist                      1 1 1 01010101 00000000 0 X H X X X 0 1 ;
repeat 2                                                         > nvmbist                      1 1 1 00000000 00000000 0 X H X X X 0 1 ;
// ######################################################################
// ## Pattern complete
// ######################################################################
end_module                                                       > nvmbist                      1 1 1 00000000 00000000 0 X H X X X 0 1 ;
}                                                                                               
